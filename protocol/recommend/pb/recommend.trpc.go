// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: recommend.proto

package pb

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// RecommendService defines service.
type RecommendService interface {
	FeedsRecommend(ctx context.Context, req *FeedsRecommendReq) (*FeedsRecommendRsp, error)
}

func RecommendService_FeedsRecommend_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &FeedsRecommendReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(RecommendService).FeedsRecommend(ctx, reqbody.(*FeedsRecommendReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// RecommendServer_ServiceDesc descriptor for server.RegisterService.
var RecommendServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.shortvideo.recommend.Recommend",
	HandlerType: ((*RecommendService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.shortvideo.recommend.Recommend/FeedsRecommend",
			Func: RecommendService_FeedsRecommend_Handler,
		},
	},
}

// RegisterRecommendService registers service.
func RegisterRecommendService(s server.Service, svr RecommendService) {
	if err := s.Register(&RecommendServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Recommend register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedRecommend struct{}

func (s *UnimplementedRecommend) FeedsRecommend(ctx context.Context, req *FeedsRecommendReq) (*FeedsRecommendRsp, error) {
	return nil, errors.New("rpc FeedsRecommend of service Recommend is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// RecommendClientProxy defines service client proxy
type RecommendClientProxy interface {
	FeedsRecommend(ctx context.Context, req *FeedsRecommendReq, opts ...client.Option) (rsp *FeedsRecommendRsp, err error)
}

type RecommendClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewRecommendClientProxy = func(opts ...client.Option) RecommendClientProxy {
	return &RecommendClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *RecommendClientProxyImpl) FeedsRecommend(ctx context.Context, req *FeedsRecommendReq, opts ...client.Option) (*FeedsRecommendRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.shortvideo.recommend.Recommend/FeedsRecommend")
	msg.WithCalleeServiceName(RecommendServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("shortvideo")
	msg.WithCalleeServer("recommend")
	msg.WithCalleeService("Recommend")
	msg.WithCalleeMethod("FeedsRecommend")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &FeedsRecommendRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END

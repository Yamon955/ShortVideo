// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: interaction.proto

package pb

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// InteractionService defines service.
type InteractionService interface {
	Like(ctx context.Context, req *LikeReq) (*LikeRsp, error)

	Follow(ctx context.Context, req *FollowReq) (*FollowRsp, error)

	Commit(ctx context.Context, req *CommitReq) (*CommitRsp, error)

	Report(ctx context.Context, req *ReportReq) (*ReportRsp, error)
}

func InteractionService_Like_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &LikeReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(InteractionService).Like(ctx, reqbody.(*LikeReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func InteractionService_Follow_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &FollowReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(InteractionService).Follow(ctx, reqbody.(*FollowReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func InteractionService_Commit_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CommitReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(InteractionService).Commit(ctx, reqbody.(*CommitReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func InteractionService_Report_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &ReportReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(InteractionService).Report(ctx, reqbody.(*ReportReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// InteractionServer_ServiceDesc descriptor for server.RegisterService.
var InteractionServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.shortvideo.interaction.Interaction",
	HandlerType: ((*InteractionService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.shortvideo.interaction.Interaction/Like",
			Func: InteractionService_Like_Handler,
		},
		{
			Name: "/trpc.shortvideo.interaction.Interaction/Follow",
			Func: InteractionService_Follow_Handler,
		},
		{
			Name: "/trpc.shortvideo.interaction.Interaction/Commit",
			Func: InteractionService_Commit_Handler,
		},
		{
			Name: "/trpc.shortvideo.interaction.Interaction/Report",
			Func: InteractionService_Report_Handler,
		},
	},
}

// RegisterInteractionService registers service.
func RegisterInteractionService(s server.Service, svr InteractionService) {
	if err := s.Register(&InteractionServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Interaction register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedInteraction struct{}

func (s *UnimplementedInteraction) Like(ctx context.Context, req *LikeReq) (*LikeRsp, error) {
	return nil, errors.New("rpc Like of service Interaction is not implemented")
}
func (s *UnimplementedInteraction) Follow(ctx context.Context, req *FollowReq) (*FollowRsp, error) {
	return nil, errors.New("rpc Follow of service Interaction is not implemented")
}
func (s *UnimplementedInteraction) Commit(ctx context.Context, req *CommitReq) (*CommitRsp, error) {
	return nil, errors.New("rpc Commit of service Interaction is not implemented")
}
func (s *UnimplementedInteraction) Report(ctx context.Context, req *ReportReq) (*ReportRsp, error) {
	return nil, errors.New("rpc Report of service Interaction is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// InteractionClientProxy defines service client proxy
type InteractionClientProxy interface {
	Like(ctx context.Context, req *LikeReq, opts ...client.Option) (rsp *LikeRsp, err error)

	Follow(ctx context.Context, req *FollowReq, opts ...client.Option) (rsp *FollowRsp, err error)

	Commit(ctx context.Context, req *CommitReq, opts ...client.Option) (rsp *CommitRsp, err error)

	Report(ctx context.Context, req *ReportReq, opts ...client.Option) (rsp *ReportRsp, err error)
}

type InteractionClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewInteractionClientProxy = func(opts ...client.Option) InteractionClientProxy {
	return &InteractionClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *InteractionClientProxyImpl) Like(ctx context.Context, req *LikeReq, opts ...client.Option) (*LikeRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.shortvideo.interaction.Interaction/Like")
	msg.WithCalleeServiceName(InteractionServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("shortvideo")
	msg.WithCalleeServer("interaction")
	msg.WithCalleeService("Interaction")
	msg.WithCalleeMethod("Like")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &LikeRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *InteractionClientProxyImpl) Follow(ctx context.Context, req *FollowReq, opts ...client.Option) (*FollowRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.shortvideo.interaction.Interaction/Follow")
	msg.WithCalleeServiceName(InteractionServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("shortvideo")
	msg.WithCalleeServer("interaction")
	msg.WithCalleeService("Interaction")
	msg.WithCalleeMethod("Follow")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &FollowRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *InteractionClientProxyImpl) Commit(ctx context.Context, req *CommitReq, opts ...client.Option) (*CommitRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.shortvideo.interaction.Interaction/Commit")
	msg.WithCalleeServiceName(InteractionServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("shortvideo")
	msg.WithCalleeServer("interaction")
	msg.WithCalleeService("Interaction")
	msg.WithCalleeMethod("Commit")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommitRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *InteractionClientProxyImpl) Report(ctx context.Context, req *ReportReq, opts ...client.Option) (*ReportRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.shortvideo.interaction.Interaction/Report")
	msg.WithCalleeServiceName(InteractionServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("shortvideo")
	msg.WithCalleeServer("interaction")
	msg.WithCalleeService("Interaction")
	msg.WithCalleeMethod("Report")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &ReportRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
